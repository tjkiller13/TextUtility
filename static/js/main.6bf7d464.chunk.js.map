{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","tgText","TextForm","useState","text","setText","style","color","heading","backgroundColor","rows","value","onChange","e","console","log","target","newText","toUpperCase","showAlert","toLowerCase","set1","Set","split","Array","from","join","arr","words","uppercaseword","forEach","element","charAt","slice","document","getElementById","select","navigator","clipboard","writeText","length","Alert","alert","word","lower","capitalize","msg","defaultProps","aboutText","App","setMode","setTgState","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6bf7d464.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// now use intellicese - rfc - reactFunctionalCOmponent\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link} from 'react-router-dom'\r\n\r\nexport default function NavBar(props) {\r\n    return (\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li>    */}\r\n            </ul>\r\n            <div className= {`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\" onClick={props.toggleMode} /> \r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">{props.tgText}</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\n// write navbar anywhere in app.cs\r\n// check out\r\n\r\n// validation for Prop data type - import Proptypes first then:-\r\nNavBar.propTypes = {\r\n    title: PropTypes.string.isRequired, \r\n    aboutText: PropTypes.string\r\n}\r\n// this is an object\r\n// isRequired means value has to be passed\r\n// otherwise, error- The prop `title` is marked as required in `NavBar`, but its value is `undefined`.\r\n\r\n\r\n// We can set default Props\r\nNavBar.defaultProps = {\r\n    // title: 'TextUtlils',\r\n    aboutText: 'About Us'\r\n}\r\n// It is always necessary to set default props","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const[text, setText] = useState('');\r\n    // setText is going to be the update function - set text to 'Enter text here'\r\n    // console.log(useState('Enter text here2'));\r\n    // returns an arrray\r\n\r\n    // text = \"new text\"; // wrong way to change the state\r\n    // setText(\"new text\"); // correct way to change state\r\n\r\n    const handleUpClick = ()=>{\r\n        console.log(\"Button was clicked\"+text)\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converting Text to Upper Case\",\"success\")\r\n    };\r\n    const handleLowClick = ()=>{\r\n        console.log(\"lower case all\"+text)\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converting Text to Lower Case\",\"success\")\r\n    };\r\n\r\n    const clear = ()=>{\r\n        console.log(\"upper case all\"+text)\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Texbox has been cleared\",\"warning\")\r\n    };\r\n\r\n    const handleOnChange = (e)=>{\r\n        console.log(\"On change\")\r\n        setText(e.target.value)\r\n    };\r\n\r\n    const copyText = () =>{        \r\n        console.log(\"I am a copy\")\r\n        var text = document.getElementById(\"myBox\")\r\n        // navigator.clipboard.writeText({text}) cannot do like this\r\n        text.select()\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Text copied successfully\",\"success\")\r\n        \r\n\r\n    }\r\n\r\n    const handleRedundancy = () =>{\r\n        let set1 = new Set(text.split(\" \"));          \r\n        let newText = Array.from(set1).join(\" \");\r\n        setText(newText);\r\n    }\r\n\r\n    const handleExtraSpaces = () =>{\r\n        let arr = text.split(/[ ]+/); // using regex to split\r\n        setText(arr.join(\" \"))\r\n    }\r\n\r\n    const capitalFirstLetter = ()=>{\r\n        let words = text.split(\" \")\r\n        let uppercaseword = ' '\r\n        words.forEach(element => {\r\n           uppercaseword += element.charAt(0).toUpperCase() + element.slice(1) + \" \"\r\n        });\r\n        setText(uppercaseword)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div style = {{ color: props.mode==='light'?'black':'white'}} className=\"container my-2\">\r\n        <h1 >{props.heading}</h1>\r\n        <form className=\"row g-3\">\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" style = {{ backgroundColor: props.mode==='light'?'black':'white', color: props.mode==='light'?'white':'black'}} id=\"myBox\" rows=\"8\" value={text}  onChange={handleOnChange}></textarea>\r\n            </div>\r\n        </form>\r\n        <div className=\"row\">\r\n            <div className=\"col-sm-12 my-2\">\r\n                <button className={`btn btn-${props.mode==='light'?'dark':'light'}`} onClick={handleUpClick}>Convert to Upper Case</button>\r\n            </div>\r\n            <div className=\"col-sm-12 my-2\">\r\n                <button className={`btn btn-${props.mode==='light'?'dark':'light'}`} onClick={handleLowClick}>Convert to Lower Case</button>\r\n            </div>\r\n            <div className=\"col-sm-12 my-2\">\r\n                <button className={`btn btn-${props.mode==='light'?'dark':'light'}`} onClick={clear}>Clear</button>\r\n            </div>\r\n            <div className=\"col-sm-12 my-2\">\r\n                <button className={`btn btn-${props.mode==='light'?'dark':'light'}`} onClick={handleRedundancy}>Remove Redundant Words</button>\r\n            </div>\r\n            <div className=\"col-sm-12 my-2\">\r\n                <button className={`btn btn-${props.mode==='light'?'dark':'light'}`} onClick={handleExtraSpaces}>Remove White Space</button>\r\n            </div>\r\n            <div className=\"col-sm-12 my-2\">\r\n                <button className={`btn btn-${props.mode==='light'?'dark':'light'}`}onClick={capitalFirstLetter}>Capitalize</button>\r\n            </div>\r\n            <div className=\"col-sm-12 my-2\">\r\n                <button className={`btn btn-${props.mode==='light'?'dark':'light'}`} onClick={copyText}>Copy Text</button>\r\n            </div>\r\n        </div>            \r\n        </div>\r\n        <div style = {{ color: props.mode==='light'?'black':'white'}} className=\"container\">\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.length>0?text.split(\" \").length:0} words, {text.length} characters</p>\r\n            <p>{text.length>0?0.008 * text.split(\" \").length:0} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter somthing to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// every component has a state\r\n// if textbox is blank, that is a state, if we have written something in the textbox, it is again another state\r\n\r\n// import {useState}","import React,{useState} from 'react'\r\n\r\n// props.alert && is used to check first condition and if its true then show second condition\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (            \r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}! </strong> {props.alert.msg}\r\n                \r\n            </div>\r\n            \r\n        \r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './Appa.css';\nimport NavBar from './components/Navbar'\nimport TextForm from './components/TextForm'\nimport About from './components/About'\nimport Alert from './components/Alert'\n\nimport React, {useState} from 'react'\n\n\n\n// React Router\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\"\n\n// Javascript jisne HTML ka mukut pehna hai - haha\n// class is a reserved keyword, therfore we use className\n// React has 2 types of components - 1. Class based components 2. Function based components\n// We have to use \"htmlFor = \"\" \" for labels, in html we used \"for\"\n// tabIndex - search using html and JSX\n\n// Error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\n// solution is wraping in <></>\n// {name} -> resolves name// We can even import image or sound\n\n\n// textUtil is passed from Navbar - this is Props\n// We are passing SM in the {prop.title}\n\n// NOTE: - Procs are never changed in the function\n\nlet name = \"Sagar\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light') // whether dark mode is enabled or not\n\n  const [tgText, setTgState] = useState('Enable Dark Mode')\n\n  const [alert,setAlert] = useState(null)\n\n  const showAlert = (message,type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(()=>{\n        setAlert(null)\n      },3000)\n  }\n  \n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      document.title = 'TextUtils (Dark Mode)'\n      setMode('dark')\n      setTgState('Disable Dark Mode')\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode enabled\",\"success\")\n      // setInterval(()=>{\n      // document.title = 'TextUtils'\n      // },1000)\n      // setInterval(()=>{\n      // document.title = 'TextUtils (Dark Mode)'\n      // },2000)\n    }\n    else{\n      document.title = 'TextUtils (Light Mode)'\n      setMode('light')\n      setTgState('Enable Dark Mode')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode enabled\",\"success\")\n    }\n  }\n\n  return (\n  <>\n  \n  {/* <NavBar title=\"SM\" aboutText=\"About Us\"/>  */}\n  {/* <NavBar title={47} aboutText=\"About Us\"/>  */}\n  {/* default props */}\n  {/* <Router> */}\n  <NavBar title =\"SM\" mode ={mode} toggleMode={toggleMode} tgText={tgText}/>\n  <Alert alert={alert}/>\n  \n  {/* <Switch>\n    <Route exact path = \"/about\">\n      <About />\n    </Route>\n    <Route exact path = \"/\">\n    </Route>\n    </Switch>\n  </Router> */}\n\n  <TextForm heading = \"Enter Text for Converting to Upper Case\" mode={mode} showAlert={showAlert}/>\n\n  {/* <About /> */}   \n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}